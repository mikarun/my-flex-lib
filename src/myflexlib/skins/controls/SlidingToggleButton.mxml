<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

@see spark.components.ToggleButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21" alpha.disabledStates="0.5">
  
  <!-- host component -->
  <fx:Metadata>
    <![CDATA[ 
    /** 
    * @copy spark.skins.spark.ApplicationSkin#hostComponent
    */
    [HostComponent("spark.components.ToggleButton")]
    ]]>
  </fx:Metadata>
  
  <fx:Script fb:purpose="styling">
    /* Define the skin elements that should not be colorized. 
    For toggle button, the graphics are colorized but the label is not. */
    static private const exclusions:Array = ["labelDisplay"];
    
    /**
     * @private
     */    
    override public function get colorizeExclusions():Array {return exclusions;}
    
    /**
     * @private
     */
    override protected function initializationComplete():void
    {
      useChromeColor = true;
      super.initializationComplete();
    }
    
    /**
     * @private
     */
    override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
    {
      var cr:Number = getStyle("cornerRadius");
      
      if (cornerRadius != cr)
      {
        cornerRadius = cr;
        shadow.radiusX = cornerRadius;
        //fill.radiusX = cornerRadius;        
        border.radiusX = cornerRadius;
      }
      
      
      super.updateDisplayList(unscaledWidth, unscaledHeight);
    }
    
    private var cornerRadius:Number = 2;
  </fx:Script>
  
  <!-- states -->
  <s:states>
    <s:State name="up" stateGroups="unselectedStates"/>
    <s:State name="over" stateGroups="overStates,unselectedStates" />
    <s:State name="down" stateGroups="downStates,unselectedStates" />
    <s:State name="disabled" stateGroups="disabledStates, unselectedStates" />
    <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
    <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
    <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
    <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
  </s:states>
  
 <s:transitions>   
    <s:Transition fromState="*" toState="upAndSelected">
      <s:Sequence target="{slider}">        
        <s:Move xTo="{grp1.width}" target="{slider}" duration="500"/>
        <s:SetAction property="left"/>
        <s:SetAction property="right"/>
      </s:Sequence>      
    </s:Transition>
    <!--<s:Transition fromState="selectedStates" toState="unselectedStates">
      <s:Move xTo="0" target="{slider}" duration="200"/>
    </s:Transition>-->
  </s:transitions>

  
  <!-- layer 1: shadow -->
  <!--- @private -->
  <s:Rect id="shadow" left="-1" right="-1" top="-1" bottom="-1" radiusX="2">
    <s:fill>
      <s:LinearGradient rotation="90">
        <s:GradientEntry color="0x000000" 
                         color.downStates="0xFFFFFF"
                         alpha="0.01"
                         alpha.downStates="0" />
        <s:GradientEntry color="0x000000" 
                         color.downStates="0xFFFFFF" 
                         alpha="0.07"
                         alpha.downStates="0.5" />
      </s:LinearGradient>
    </s:fill>
  </s:Rect>
  
  <!-- layer 1: shadow -->
  <!--- @private -->
  <s:Rect id="slider" top="2" bottom="2" width="{grp1.width}" left.unselectedStates="0" left.selectedStates="null" right.selectedStates="0" right.unselectedStates="null">
    <s:stroke>
      <s:LinearGradientStroke rotation="90" weight="1">
        <s:GradientEntry color="0x000000" 
                         alpha="0.5625"
                         alpha.down="0.6375"
                         alpha.selectedStates="0.6375" />
        <s:GradientEntry color="0x000000" 
                         alpha="0.75" 
                         alpha.down="0.85"
                         alpha.selectedStates="0.85" />
      </s:LinearGradientStroke>
    </s:stroke>    
  </s:Rect>
  
  
  <!-- layer 2: fill -->
  <!--- @private -->
  <!--<s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
    <s:fill>
      <s:LinearGradient rotation="90">
        <s:GradientEntry color="0xFFFFFF" 
                         color.selectedUpStates="0xBBBDBD"
                         color.overStates="0xBBBDBD" 
                         color.downStates="0xAAAAAA" 
                         alpha="0.85" 
                         alpha.overAndSelected="1" />
        <s:GradientEntry color="0xD8D8D8" 
                         color.selectedUpStates="0x9FA0A1"
                         color.over="0x9FA0A1" 
                         color.overAndSelected="0x8E8F90"
                         color.downStates="0x929496" 
                         alpha="0.85"
                         alpha.overAndSelected="1" />
      </s:LinearGradient>
    </s:fill>
  </s:Rect>
  -->
  
  <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
  <!--- @private -->
  <s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2">
    <s:stroke>
      <s:LinearGradientStroke rotation="90" weight="1">
        <s:GradientEntry color="0x000000" 
                         alpha="0.5625"
                         alpha.down="0.6375"
                         alpha.selectedStates="0.6375" />
        <s:GradientEntry color="0x000000" 
                         alpha="0.75" 
                         alpha.down="0.85"
                         alpha.selectedStates="0.85" />
      </s:LinearGradientStroke>
    </s:stroke>
  </s:Rect>
  
  <s:HGroup left="0" right="0" top="2">
    <s:Group id="grp1" left="0" top="0" bottom="0">      
        <s:Label id="labelDisplay"
                 textAlign="center"
                 verticalAlign="top"
                 maxDisplayedLines="1"
                 horizontalCenter="0" verticalCenter="1"
                 left="10" right="10" top="2" bottom="2">
        </s:Label>        
        
    </s:Group>
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Group width="{grp1.width}" right="0" top="0" bottom="0">          
      <s:Label text="Pouet"
               textAlign="center"
               verticalAlign="bottom"
               maxDisplayedLines="1"
               horizontalCenter="0" verticalCenter="1"
               left="10" right="10" top="2" bottom="2">
    </s:Label>
    </s:Group>
    </s:HGroup>
</s:SparkSkin>